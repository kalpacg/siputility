package siputility

import (
	"bytes"
	"testing"
)

func TestConcatenation(t *testing.T) {
	stream := [][]byte{[]byte{1, 10}, []byte{2, 9}, []byte{3, 8, 7}}
	result := Concat(stream)

	if !bytes.Equal(result, []byte{1, 10, 2, 9, 3, 8, 7}) {
		t.Errorf("stream = %v, result = %v ", stream, result)
	}
}

func TestDecodeSipCancel(t *testing.T) {

	cancelMessage := getSipCancelPacket()
	var message Message
	message = Decode(cancelMessage)
	t.Logf("result ==> %v", message)
}

func TestDecodeSipRegister(t *testing.T) {

	registerMessage := getSipRegisterPacket()
	var message Message
	message = Decode(registerMessage)
	t.Logf("result ==> %v", message)
}

func TestGetHeaderElements(t *testing.T) {

	registerMessage := getSipRegisterPacket()
	message := Decode(registerMessage)
	headers := message.Headers
	value, _ := GetHeaderValue(headers, "User-Agent")
	t.Logf("result ==> %v", value)

}

// Decodes SIP CANCEL message to a Message{} struct
// SIP CANCEL byte stream was obtained from a Nokia C5 device
// which runs on Android Oreo
func getSipCancelPacket() []byte {
	cancelPacket := []byte{67, 65, 78, 67, 69, 76, 32, 115, 105, 112, 58, 48, 55, 55, 57, 48, 49, 53, 57, 53, 57, 64, 49, 57, 50, 46, 49, 54, 56, 46, 49, 55, 48, 46, 55, 32, 83, 73, 80, 47, 50, 46, 48, 13, 10, 67, 97, 108, 108, 45, 73, 68, 58, 32, 101, 57, 99, 56, 56, 100, 52, 57, 55, 100, 51, 100, 48, 100, 55, 101, 55, 100, 98, 50, 98, 51, 57, 50, 51, 56, 50, 51, 52, 48, 49, 57, 64, 49, 57, 50, 46, 49, 54, 56, 46, 49, 55, 48, 46, 51, 13, 10, 84, 111, 58, 32, 60, 115, 105, 112, 58, 48, 55, 55, 57, 48, 49, 53, 57, 53, 57, 64, 49, 57, 50, 46, 49, 54, 56, 46, 49, 55, 48, 46, 55, 62, 13, 10, 67, 83, 101, 113, 58, 32, 55, 49, 53, 50, 32, 67, 65, 78, 67, 69, 76, 13, 10, 70, 114, 111, 109, 58, 32, 34, 97, 116, 111, 109, 98, 97, 49, 50, 51, 34, 32, 60, 115, 105, 112, 58, 97, 116, 111, 109, 98, 97, 49, 50, 51, 64, 49, 57, 50, 46, 49, 54, 56, 46, 49, 55, 48, 46, 55, 62, 59, 116, 97, 103, 61, 52, 55, 57, 49, 53, 48, 53, 52, 48, 13, 10, 86, 105, 97, 58, 32, 83, 73, 80, 47, 50, 46, 48, 47, 85, 68, 80, 32, 49, 57, 50, 46, 49, 54, 56, 46, 49, 55, 48, 46, 51, 58, 52, 55, 54, 56, 56, 59, 98, 114, 97, 110, 99, 104, 61, 122, 57, 104, 71, 52, 98, 75, 54, 98, 51, 98, 50, 99, 98, 101, 57, 51, 99, 54, 101, 102, 54, 100, 54, 99, 52, 102, 100, 54, 99, 57, 48, 99, 55, 50, 52, 49, 48, 55, 51, 50, 51, 54, 51, 51, 59, 114, 112, 111, 114, 116, 13, 10, 77, 97, 120, 45, 70, 111, 114, 119, 97, 114, 100, 115, 58, 32, 55, 48, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 76, 101, 110, 103, 116, 104, 58, 32, 48, 13, 10, 13, 10}

	return cancelPacket
}

// Decodes SIP REGISTER message to a Message{} struct
// SIP REGISTER byte stream was obtained from a OnePlus 2 device
// which runs on Android Marshmellow (6.0.1)
func getSipRegisterPacket() []byte {
	registerPacket := []byte{82, 69, 71, 73, 83, 84, 69, 82, 32, 115, 105, 112, 58, 49, 57, 50, 46, 49, 54, 56, 46, 49, 46, 51, 55, 32, 83, 73, 80, 47, 50, 46, 48, 13, 10, 67, 97, 108, 108, 45, 73, 68, 58, 32, 101, 56, 100, 101, 51, 101, 97, 57, 98, 49, 102, 48, 51, 57, 49, 52, 97, 55, 100, 57, 101, 53, 49, 49, 56, 99, 52, 52, 97, 52, 57, 97, 64, 49, 57, 50, 46, 49, 54, 56, 46, 49, 46, 51, 54, 13, 10, 67, 83, 101, 113, 58, 32, 54, 48, 53, 51, 32, 82, 69, 71, 73, 83, 84, 69, 82, 13, 10, 70, 114, 111, 109, 58, 32, 34, 107, 97, 108, 112, 97, 115, 112, 104, 111, 110, 101, 34, 32, 60, 115, 105, 112, 58, 107, 97, 108, 112, 97, 115, 112, 104, 111, 110, 101, 64, 49, 57, 50, 46, 49, 54, 56, 46, 49, 46, 51, 55, 62, 59, 116, 97, 103, 61, 51, 53, 52, 55, 48, 57, 54, 54, 50, 52, 13, 10, 84, 111, 58, 32, 34, 107, 97, 108, 112, 97, 115, 112, 104, 111, 110, 101, 34, 32, 60, 115, 105, 112, 58, 107, 97, 108, 112, 97, 115, 112, 104, 111, 110, 101, 64, 49, 57, 50, 46, 49, 54, 56, 46, 49, 46, 51, 55, 62, 13, 10, 86, 105, 97, 58, 32, 83, 73, 80, 47, 50, 46, 48, 47, 85, 68, 80, 32, 49, 57, 50, 46, 49, 54, 56, 46, 49, 46, 51, 54, 58, 53, 52, 48, 57, 52, 59, 98, 114, 97, 110, 99, 104, 61, 122, 57, 104, 71, 52, 98, 75, 50, 52, 99, 54, 100, 100, 99, 54, 56, 56, 101, 100, 54, 51, 98, 54, 48, 55, 50, 54, 53, 48, 54, 52, 55, 54, 51, 57, 57, 101, 97, 50, 51, 56, 51, 57, 51, 55, 59, 114, 112, 111, 114, 116, 13, 10, 77, 97, 120, 45, 70, 111, 114, 119, 97, 114, 100, 115, 58, 32, 55, 48, 13, 10, 85, 115, 101, 114, 45, 65, 103, 101, 110, 116, 58, 32, 83, 73, 80, 65, 85, 65, 47, 48, 46, 49, 46, 48, 48, 49, 13, 10, 67, 111, 110, 116, 97, 99, 116, 58, 32, 42, 13, 10, 69, 120, 112, 105, 114, 101, 115, 58, 32, 48, 13, 10, 67, 111, 110, 116, 101, 110, 116, 45, 76, 101, 110, 103, 116, 104, 58, 32, 48, 13, 10, 13, 10}

	return registerPacket
}
